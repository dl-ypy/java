//按位运算符
public class Operator_2Bitwise {
    public static void main(String[] args) {
		System.out.println(1&2);//按位与        对应位都为1，则为1，否则为0
		System.out.println(1|2);//按位或        对应位都为0，则为0，否则为1
		System.out.println(1^1);//按位异或     对应位都相同，则为0，否则为1
		System.out.println(~9);//按位取反     0变1，1变0
							   //二进制在内存中已补码的形式存储
							   //注：原码->补码：正数的补码与原码相同，负数的补码是对其原码逐位取反，但符号位除外，然后整个数加1。
							   //   补码->原码：正数的原码是补码本身，负数由右向左查找到第一个1与符号位之间的所有数字按位取反。
							   //~9的计算过程：
							   //转二进制：0 1001
							   //计算补码：0 1001
							   //按位取反：1 0110
							   //转为原码：1 1010
							   //符号位为1是负数，即-10
		System.out.println(1<<3);//按位左移  相当于1*2^3  计算2^3效率最高的算法。
		System.out.println(8>>2);//按位右移  相当于8/2^2
	}
}
/*
***************JDK1.8运行结果****************
0
3
0
-10
8
2
*/