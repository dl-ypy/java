/*
    时间：2016年1月31日18:02:01
    目的：线程的控制之join。
*/
public class XianCheng_5
{
    public static void main(String[] args)
    {
	A aa = new A();
	Thread t = new Thread(aa);
	t.start();

	try
	{
	    t.join();//暂停当前正在执行t.join()语句的线程（不是暂停调用join的线程）,直到t所对应的线程终止后才会获得继续执行的机会。
	}
	catch (InterruptedException e)
	{
	    e.printStackTrace();
	}

	for (int i=0; i<50; i++)
	{
	    System.out.println("主线程："+i);
	}
    }
}

class A implements Runnable
{
    public void run()
    {
	for (int i=0; i<50; i++)
	{
	    System.out.println("子线程："+i);
	}
    }
}
/*
***************结果***************
子线程：0
子线程：1
子线程：2
子线程：3
子线程：4
子线程：5
子线程：6
子线程：7
子线程：8
子线程：9
子线程：10
子线程：11
子线程：12
子线程：13
子线程：14
子线程：15
子线程：16
子线程：17
子线程：18
子线程：19
子线程：20
子线程：21
子线程：22
子线程：23
子线程：24
子线程：25
子线程：26
子线程：27
子线程：28
子线程：29
子线程：30
子线程：31
子线程：32
子线程：33
子线程：34
子线程：35
子线程：36
子线程：37
子线程：38
子线程：39
子线程：40
子线程：41
子线程：42
子线程：43
子线程：44
子线程：45
子线程：46
子线程：47
子线程：48
子线程：49
主线程：0
主线程：1
主线程：2
主线程：3
主线程：4
主线程：5
主线程：6
主线程：7
主线程：8
主线程：9
主线程：10
主线程：11
主线程：12
主线程：13
主线程：14
主线程：15
主线程：16
主线程：17
主线程：18
主线程：19
主线程：20
主线程：21
主线程：22
主线程：23
主线程：24
主线程：25
主线程：26
主线程：27
主线程：28
主线程：29
主线程：30
主线程：31
主线程：32
主线程：33
主线程：34
主线程：35
主线程：36
主线程：37
主线程：38
主线程：39
主线程：40
主线程：41
主线程：42
主线程：43
主线程：44
主线程：45
主线程：46
主线程：47
主线程：48
主线程：49
*/
